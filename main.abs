PWD = pwd()

f dependencies(){
	`sudo apt install -y build-essential`

	# clipboard
	`sudo apt install -y xsel xclip wl-clipboard`

	# http request
	`sudo apt install -y wget curl`

	# open ssl
	`sudo apt install -y libssl-dev`

	# exa git
	`sudo apt install -y libgit2-dev`

	# ssh
	`sudo apt install -y openssh-server`

	# system info
	`sudo apt install -y neofetch`
}

# install browser: chrome, brave, vieb

f vieb(){
	`ln -s $PWD/config/vieb/viebrc ~/.config/Vieb/viebrc`
}

# install input-remapper

# install regolith desktop
f regolith_desktop(){
	`wget -qO - https://regolith-desktop.org/regolith.key | gpg --dearmor | sudo tee /usr/share/keyrings/regolith-archive-keyring.gpg > /dev/null`

	arch = `dpkg --print-architecture`
	release = `lsb_release -cs`
	`echo deb "[arch=amd64 jigned-by=/usr/share/keyrings/regolith-archive-keyring.gpg] https://regolith-desktop.org/release-ubuntu-$release-$arch $release main" | sudo tee /etc/apt/sources.list.d/regolith.list`

	`sudo apt update`
	`sudo apt install regolith-desktop regolith-compositor-picom-glx`
	`sudo apt upgrade`

	# reboot
	`sudo apt install regolith-look-*`
	`sudo apt install i3xrocks-focused-window-name i3xrocks-rofication i3xrocks-info i3xrocks-app-launcher i3xrocks-memory`
}

f picom(){
	`mkdir ~/.config/regolith2/picom`
	`ln -s $PWD/config/picom/config ~/.config/regolith2/picom/config`
}

f rust(){
	`cargo install --locked cargo-binstall`
	`cargo install --locked amber`
	`cargo install --locked sd`
}

f golang(){
	`go install github.com/jesseduffield/lazydocker@latest`
	`go install github.com/jesseduffield/lazygit@latest`

}

f nodejs(){
	`npm install -g gitmoji-cli`
}

f helix(){
	repo = "https://github.com/helix-editor/helix.git"
	dir = "~/Documents/Github/Lang/Rust/helix"

	`git clone $repo $dir`
	`cargo install --path $dir/helix-term`

	`mkdir ~/.config/helix`
	`ln -s $PWD/config/helix/config.toml ~/.config/helix/config.toml`
	`ln -s $dir/runtime ~/.config/helix/runtime`

	hx = `which hx`
	`sudo update-alternatives --install /usr/bin/editor editor $hx 100`
	`cp $dir/contrib/Helix.desktop ~/.local/share/applications`

	# opacity
	`ambr '"ui.background"= { bg = "background" }' '"ui.background"= {}' ~/.config/helix/runtime/themes`
}

f install_lsp(){
	`npm install -g bash-language-server`
	`pip install cmake-language-server`
	`sudo apt install clang`
	`go install golang.org/x/tools/gopls@latest`
}

f zellij(){
	repo = "https://github.com/zellij-org/zellij.git"
	dir = "~/Documents/Github/Lang/Rust/zellij"
	
	`git clone $repo $dir`
	`cargo install --path $dir --locked`

	`mkdir ~/.config/zellij`
	`ln -s $PWD/config/zellij/config.kdl ~/.config/zellij/config.kdl`
}

f alacritty(){
	repo = "https://github.com/alacritty/alacritty.git"
	dir = "~/Documents/Github/Lang/Rust/alacritty"

	# dependencies
	`sudo apt install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3`
	
	`git clone $repo $dir`
	`cargo install --path $dir/alacritty`

	`mkdir ~/.config/alacritty`
	`ln -s $PWD/config/alacritty/config.yml ~/.config/alacritty/alacritty.yml`

	alacritty = `which alacritty`
	`sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $alacritty 50` 
}

f shell(){
	`sudo apt install -y zsh`
	`cargo install --locked starship`
	`cargo install --locked sheldon`
	`cargo install --locked zoxide`
	`cargo install --locked exa`

	`mkdir ~/.config/sheldon`
	`ln -s $PWD/config/sheldon/plugins.toml ~/.config/sheldon/plugins.toml`

	`ln -s $PWD/config/zsh/.zshrc ~/.zshrc`
}

# install docker
f docker(){
	`sudo apt-get update`
	`sudo apt install ca-certificates curl gnupg lsb-release`

	`sudo mkdir -p /etc/apt/keyrings`
	`curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg`

	arch = `dpkg --print-architecture`
	release = `lsb_release -cs`
	`echo "deb [arch=$arch signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $release stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null`

	`sudo apt update`
	`sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin`
	`sudo apt upgrade`

	`sudo groupadd docker`
	`sudo usermod -aG docker $USER`

	# reboot
	`docker run hello-world`
}
